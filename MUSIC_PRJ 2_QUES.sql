--MUSIC STORE ANALYSIS

-- EASY QUESTIONS
--Q1 WHO IS SENIOR MOST EMPLOYEE BASED ON JOB TITLE?
SELECT * FROM EMPLOYEE ORDER BY LEVELS DESC LIMIT 1;

--Q2 WHICH COUNTERIES HAVE THE MOST INVOICES?
SELECT * FROM INVOICE;
SELECT COUNT(*) AS c, BILLING_COUNTRY FROM INVOICE GROUP BY BILLING_COUNTRY ORDER BY C DESC;

--Q3 WHAT ARE TOP 3 VALUES OF TOTAL INVOICE?
SELECT TOTAL FROM INVOICE ORDER BY TOTAL DESC LIMIT 3;

--Q4 WHICH CITY HAS THE BEST CUSTOMERS? WE WOULD LIKE TO THROW A PROMOTIONAL MUSIC FESTIVAL IN THE CITY WHERE WE CAN MAKE THE MOST MONEY
--WRITE A QUERY THAT RETURNS ONE CITY THAT HAS THE HIGHEST SUM OF INVOICE TOTALS.RETURN BOTH THE CITY NAME AND SUM OF ALL INVOICE TOTALS

SELECT SUM(TOTAL) AS SUM_OF_TOTAL , BILLING_CITY FROM INVOICE GROUP BY BILLING_CITY ORDER BY SUM_OF_TOTAL DESC LIMIT 1;

--Q5 WHO IS THE BEST CUSTOMER? THE CUSTOMER WHO HAS SPENT THE MOST MONEY WILL BE DECLARED THE BEST CUSTOMER.WRITE A QUERY THAT RETURNS THE PERSON WHO HAS SPENT THE MOSTMONEY.

SELECT CUSTOMER.CUSTOMER_ID, FIRST_NAME, LAST_NAME, SUM(TOTAL) AS TOTAL_SPENDING FROM CUSTOMER JOIN INVOICE ON CUSTOMER.CUSTOMER_ID = INVOICE.CUSTOMER_ID GROUP BY CUSTOMER.CUSTOMER_ID
ORDER BY TOTAL_SPENDING DESC LIMIT 1;

--MODERATE QUESTIONS

--Q1 WRITE QUERY TO RETURN THE EMAIL, FIRST NAME, LAST NAME, GENRE OF ALL ROCK MUSIC LISTENERS. RETURN YOUR LIST ORDERED ALPHABETICALLY BY EMAIL STARTING WITH A

SELECT DISTINCT EMAIL  ,FIRST_NAME , LAST_NAME FROM CUSTOMER JOIN INVOICE ON CUSTOMER.CUSTOMER_ID = INVOICE.CUSTOMER_ID
JOIN INVOICE_LINE ON INVOICE.INVOICE_ID = INVOICE_LINE.INVOICE_ID WHERE TRACK_ID IN (SELECT TRACK_ID FROM TRACK JOIN GENRE ON TRACK.GENRE_ID = GENRE.GENRE_ID 
WHERE GENRE.NAME LIKE 'ROCK') ORDER BY EMAIL;

--Q2 LET'S INVITE THE ARTISTS WHO HAVE WRITTEN MOST ROCK MUSIC IN OUR DATASET. WRITE A QUERY THAT RETURNS THE ARIST NAME AND TOTAL TRACK COUNT OF TOP 10 ROCK BANDS

SELECT ARTIST.ARTIST_ID ,ARTIST.NAME, COUNT(ARTIST.ARTIST_ID) AS NUMBER_OF_SONGS FROM TRACK JOIN ALBUM ON ALBUM.ALBUM_ID = TRACK.ALBUM_ID 
JOIN ARTIST ON ARTIST.ARTIST_ID = ALBUM.ARTIST_ID JOIN GENRE ON GENRE.GENRE_ID = TRACK.GENRE_ID 
WHERE GENRE.NAME LIKE 'ROCK' GROUP BY ARTIST.ARTIST_ID ORDER BY NUMBER_OF_SONGS DESC LIMIT 10;

--Q3 RETURN ALL THE TRACK NAMES THAT HAVE A SONG LENGTH LONGER THAT THE AVERAGE SONG LENGTH.
-- RETURN THE NAME AND MILLISECONDS FOR EACH TRACK .ORDER BY THE SONG LENGHT WITH THE LONGEST SONGS LISTED FIRST.

SELECT NAME, MILLISECONDS FROM TRACK WHERE MILLISECONDS >( SELECT AVG(MILLISECONDS) AS AVG_TRACK_LENGTH FROM TRACK) ORDER BY MILLISECONDS DESC;

--ADVANCE QUESTIONS
--Q1 FIND HOW MUCH AMOUNT SPENT BY EACH CUSTOMER ON ARTISTS? WRITE A QUERY TO RETURN CUSTOMER NAME, ARTIST NAME AND TOTAL SPENT.

WITH BEST_SELLING_ARTIST AS (
SELECT ARTIST.ARTIST_ID AS ARTIST_ID, ARTIST.NAME AS ARTIST_NAME, SUM(INVOICE_LINE.UNIT_PRICE*INVOICE_LINE.QUANTITY) AS TOTAL_SALES
FROM INVOICE_LINE
JOIN TRACK ON TRACK.TRACK_ID = INVOICE_LINE.TRACK_ID
JOIN ALBUM ON ALBUM.ALBUM_ID = TRACK.ALBUM_ID
JOIN ARTIST ON ARTIST.ARTIST_ID = ALBUM.ARTIST_ID
GROUP BY 1
ORDER BY 3 DESC
LIMIT 1 )

SELECT C.CUSTOMER_ID, C.FIRST_NAME, C.LAST_NAME, BSA.ARTIST_NAME, SUM(IL.UNIT_PRICE*IL.QUANTITY) AS AMOUNT_SPENT
FROM INVOICE I
JOIN CUSTOMER C ON C.CUSTOMER_ID = I.CUSTOMER_ID
JOIN INVOICE_LINE IL ON IL.INVOICE_ID = I.INVOICE_ID
JOIN TRACK T ON T.TRACK_ID = IL.TRACK_ID
JOIN ALBUM ALB ON ALB.ALBUM_ID = T.ALBUM_ID
JOIN BEST_SELLLING_ARTIST BSA ON BSA.ARTIST_ID = ALB.ARTIST_ID
GROUP BY 1,2,3,4
ORDER BY 5 DESC;

--Q2 WE WANT TO FIND OUT THE MOST POPULAR GENRE FOR EACH COUNTRY. WE DETERMINE THE MOST POPULAR GENRE AS THE GENRE WITH THE HIGHEST AMOUNT OF PURCHASES
--WRITE A QUERY THAT RETURNS EACH COUNTRY ALONG WITH THE TOP GENRE . FOR COUNTERIES WHERE THE MAXIMUM NUMBER OF PURCHASES IS SHARED 
--RETURN ALL GENRES

WITH POPULAR_GENRE AS(
SELECT COUNT(INVOICE_LINE.QUANTITY) AS PURCHASES, CUSTOMER.COUNTRY, GENRE.NAME, GENRE.GENRE_ID, ROW_NUMBER () OVER(PARTITION BY CUSTOMER.COUNTRY ORDER BY COUNT(INVOICE_LINE.QUANTITY)DESC)
AS ROWNO FROM INVOICE_LINE
JOIN INVOICE ON INVOICE.INVOICE_ID = INVOICE_LINE.INVOICE_ID
JOIN CUSTOMER ON CUSTOMER.CUSTOMER_ID = INVOICE.CUSTOMER_ID
JOIN TRACK ON TRACK.TRACK_ID = INVOICE_LINE.TRACK_ID
JOIN GENRE ON GENRE.GENRE_ID = TRACK.GENRE_ID
GROUP BY 2,3,4
ORDER BY 2 ASC, 1 DESC
)

SELECT * FROM POPULAR_GENRE WHERE ROWNO<= 1

--Q3 WRITE A QUERY THAT DETERMINES THE CUSTOMER THAT HAS SPENT THE MOST ON MUSIC FOR EACH COUNTRY .WRITE A QUERY THAT RETURNS THE COUNTRY ALONG WITH THE TOP CUSTOMER
-- AND HOW MUCH THEY SPENT .FOR COUNTERIES WHERE THE TOP  AMOUNT SPENT IS SHARED, PROVIDE ALL CUSTOMERS WHO SPENT THIS AMOUNT

WITH CUSTOMER_WITH_COUNTRY AS (
SELECT CUSTOMER.CUSTOMER_ID ,FIRST_NAME, LAST_NAME, BILLING_COUNTRY, SUM(TOTAL) AS TOTAL_SPENDING,
ROW_NUMBER() OVER(PARTITION BY BILLING_COUNTRY ORDER BY SUM(TOTAL) DESC) AS ROWNO
FROM INVOICE
JOIN CUSTOMER ON CUSTOMER.CUSTOMER_ID = INVOICE.CUSTOMER_ID
GROUP BY 1,2,3,4 
ORDER BY 4 ASC, 5 DESC)

SELECT * FROM CUSTOMER_WITH_COUNTRY WHERE ROWNO<=1;


)






